{
    "code": "\ntraining_data = datasets.FashionMNIST(\n    root='data',\n    train=True,\n    download=True,\n    transform=ToTensor()\n)\n\ntest_data = datasets.FashionMNIST(\n    root='data',\n    train=False,\n    download=True,\n    transform=ToTensor()\n)\n\ntrain_dataloader = DataLoader(training_data, batch_size)\ntest_dataloader = DataLoader(test_data, batch_size)\n\nmodel = Network()\nloss_fn = nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=1e-3)\n\nepochs = 5\nfor epoch in range(epochs):\n    print(f'Epoch {epoch}')\n    print('-' * 72)\n    # Train loop\n    size = len(train_dataloader.dataset)\n    model.train()\n    for batch, (X, y) in enumerate(train_dataloader):\n        pred = model(X)\n        loss = loss_fn(pred, y)\n\n        loss.backward()\n        optimizer.step()\n        optimizer.zero_grad()\n        loss, current = loss.item(), batch * batch_size + len(X)\n        if batch % 100 == 0:\n            print(f'loss: {loss:>7f}  [{current:>5d}/{size:>5d}]')\n        yield {'loss': loss}\n    # Test loop\n    model.eval()\n    size = len(test_dataloader.dataset)\n    num_batches = len(test_dataloader)\n    test_loss, correct = 0, 0\n\n    with torch.no_grad():\n        for X, y in test_dataloader:\n            pred = model(X)\n            test_loss += loss_fn(pred, y).item()\n            correct += (pred.argmax(axis=1) == y).type(torch.float).sum().item()\n    test_loss /= num_batches\n    correct /= size\n    print(f'Test Error:\\nAccurcacy: {(100 * correct):>0.1f}% Avg loss: {test_loss:>8f}\\n')\n    yield {'test_loss': test_loss, 'acc': correct}\nprint('Done.')",
    "cpu": {
        "cores": 6,
        "threads": 12,
        "usage": 50.1
    },
    "disk_gb": {
        "total": 499.963174912,
        "used": 10.259705856
    },
    "memory_gb": {
        "total": 34.359738368,
        "available": 23.883132928,
        "used": 10.473570304
    },
    "python": {
        "version": "Python 3.12.4"
    },
    "requirements": [
        "shellingham==1.5.4",
        "pexpect==4.9.0",
        "ruff==0.4.4",
        "decorator==5.1.1",
        "pip==24.1.2",
        "tzdata==2024.1",
        "traitlets==5.14.3",
        "aiohttp==3.9.5",
        "jaraco.classes==3.4.0",
        "smmap==5.0.1",
        "ptyprocess==0.7.0",
        "aiosignal==1.3.1",
        "PyYAML==6.0.1",
        "GitPython==3.1.43",
        "parso==0.8.4",
        "prompt_toolkit==3.0.47",
        "fasteners==0.19",
        "Jinja2==3.1.4",
        "gitdb==4.0.11",
        "torchaudio==2.2.2",
        "markdown-it-py==3.0.0",
        "multidict==6.0.5",
        "six==1.16.0",
        "pycodestyle==2.12.0",
        "mypy-extensions==1.0.0",
        "pandas==2.2.2",
        "jaraco.functools==4.0.1",
        "mypy==1.10.1",
        "attrs==23.2.0",
        "wonderwords==2.2.0",
        "jaraco.context==5.3.0",
        "typer==0.12.3",
        "pytz==2024.1",
        "rich==13.7.1",
        "duckdb==1.0.0",
        "fsspec==2024.6.1",
        "numpy==1.26.4",
        "flake8==7.1.0",
        "stack-data==0.6.3",
        "asttokens==2.4.1",
        "yarl==1.9.4",
        "psutil==6.0.0",
        "jedi==0.19.1",
        "pure-eval==0.2.2",
        "sympy==1.13.0",
        "filelock==3.15.4",
        "pydantic_core==2.20.1",
        "mdurl==0.1.2",
        "python-dateutil==2.9.0.post0",
        "mpmath==1.3.0",
        "mccabe==0.7.0",
        "keyring==25.2.1",
        "wcwidth==0.2.13",
        "torch==2.2.2",
        "idna==3.7",
        "torchvision==0.17.2",
        "cubyc==0.1.1",
        "networkx==3.3",
        "MarkupSafe==2.1.5",
        "frozenlist==1.4.1",
        "pillow==10.4.0",
        "ijson==3.3.0",
        "typing_extensions==4.12.2",
        "matplotlib-inline==0.1.7",
        "pydantic==2.8.2",
        "more-itertools==10.3.0",
        "annotated-types==0.7.0",
        "Pygments==2.18.0",
        "executing==2.0.1",
        "ipython==8.26.0",
        "pyflakes==3.2.0",
        "click==8.1.7",
        "tabulate==0.9.0"
    ],
    "runtime": 0.098696,
    "tags": [
        "fashion-mnist"
    ],
    "timestamp": "2024-07-11 22:14:10.583217"
}